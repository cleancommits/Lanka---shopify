{% comment %}theme-check-disable NestedSnippet{% endcomment %}
{%- comment -%}
  Cart footer

  Accepts:
    - form_id: {String} Form id
    - current_cart: {Object} Cart
    - note_inside_accordion: {Boolean} Show note inside accordion
    - show_heading: {Boolean} Show heading
    - show_view_cart_button: {Boolean} Show view cart button
    - show_additional_checkout_buttons: {Boolean} Show additional checkout buttons
{%- endcomment -%}
{%- liquid
  assign total_cart_price = current_cart.total_price | money
  if settings.currency_codes_on_totals_enabled
    assign total_cart_price = current_cart.total_price | money_with_currency
  endif

  assign cart_total = current_cart.total_price
  assign free_shipping_threshold = settings.cart_free_shipping_threshold | times: 100
  assign free_shipping_reached = false
  if cart_total >= free_shipping_threshold
    assign free_shipping_reached = true
  endif
-%}

<script>
  function adjustDrawActionsPosition() {

    const drawActions = document.querySelector(".cart__controls");
    const chatButton = document.querySelector("#chat-button");

    if (!drawActions || !chatButton) {
      console.log("Required elements not found, skipping.");
      return;
    }

    const applyPadding = () => {
      const rect = chatButton.getBoundingClientRect();
      if (rect.height > 0) {
        drawActions.style.paddingBottom = `${rect.height + 20}px`;
      } else {
        console.warn("Chat button height is 0, retrying...");
        requestAnimationFrame(applyPadding);
      }
    };

    if (document.fonts) {
      // Wait for web fonts to load before measuring
      document.fonts.ready.then(() => {
        requestAnimationFrame(applyPadding);
      });
    } else {
      requestAnimationFrame(applyPadding);
    }
  }

  // Run once on load
  window.addEventListener("load", () => {
    adjustDrawActionsPosition();
  });

  // Re-run on resize and Shopify section events
  [
    "resize",
    "shopify:section:load",
    "shopify:section:unload",
    "shopify:section:select",
    "shopify:section:deselect",
  ].forEach((evt) => {
    window.addEventListener(evt, () => {
      adjustDrawActionsPosition();
    });
  });

  // Optional: Watch for sidebar visibility changes
  const sidebar = document.querySelector(".collection-sidebar.js-collection-draw");
  if (sidebar) {
    const observer = new MutationObserver(() => {
      const visible = window.getComputedStyle(sidebar).display !== "none";
      if (visible) {
        adjustDrawActionsPosition();
      }
    });
    observer.observe(sidebar, { attributes: true, attributeFilter: ["style", "class"] });
  }
</script>
<div class="cart__controls" data-free-shipping-threshold="{{ free_shipping_threshold | default: 0 }}">
  <div class="cart__details">
    {%- if show_heading -%}
      <div class="cart__label">
        {{ 'cart.general.order_summary' | t }}
      </div>
    {%- endif -%}

    {%- if settings.cart_notes_enable -%}
      <div class="cart__note">
        {% render 'cart-note', form_id: form_id, note: current_cart.note, inside_accordion: note_inside_accordion %}
      </div>
    {%- endif -%}

    <div class="cart__order-details">
      <cart-discounts>
        <discount-list>
          {%- if current_cart.cart_level_discount_applications != blank -%}
            <ul class="discounts">
              {%- for discount_application in current_cart.cart_level_discount_applications -%}
                <li class="discount">
                  {%- assign discount_amount = discount_application.total_allocated_amount | money -%}
                  {% render 'cart-discount', title: discount_application.title, amount: discount_amount %}
                </li>
              {%- endfor -%}
            </ul>
          {%- endif -%}
        </discount-list>
      </cart-discounts>

      <noscript>
        <p class="cart__total">
          <span>{{ 'cart.general.subtotal' | t }}</span><cart-total class="money">{{- total_cart_price -}}</cart-total>
        </p>
      </noscript>
      {%- unless settings.cart_checkout_button_type == 'checkout_cart_amount' -%}
        <p class="cart__total">
          <span>{{ 'cart.general.subtotal' | t }}</span><cart-total class="money">{{- total_cart_price -}}</cart-total>
        </p>
      {%- endunless -%}

      <p class="cart__message" {% if free_shipping_reached %}style="display: none;"{% endif %}>
        {%- if cart.taxes_included and shop.shipping_policy.body != blank -%}
          {{ 'cart.general.taxes_included_and_shipping_policy_html' | t: link: shop.shipping_policy.url }}
        {%- elsif cart.taxes_included -%}
          {{ 'cart.general.taxes_included_but_shipping_at_checkout' | t }}
        {%- elsif shop.shipping_policy.body != blank -%}
          {{ 'cart.general.taxes_and_shipping_policy_at_checkout_html' | t: link: shop.shipping_policy.url }}
        {%- else -%}
          {{ 'cart.general.taxes_and_shipping_at_checkout' | t }}
        {%- endif -%}
      </p>
    </div>
  </div>

  <div class="cart__actions">
    <div
      class="
        cart__buttons
        {% if show_view_cart_button and settings.cart_checkout_button_type == 'checkout_view_cart' -%}
          cart__buttons--view-cart
        {%- endif %}
        {% if settings.cart_terms -%}
          cart__buttons--terms
        {%- endif %}
        {% if show_additional_checkout_buttons and additional_checkout_buttons -%}
          cart__buttons--additional-checkout-buttons
        {%- endif %}
        {% if settings.cart_payment_icons_enable and shop.enabled_payment_types -%}
          cart__buttons--payment-icons
        {%- endif %}
      "
    >
      <form id="{{ form_id }}" action="{{ routes.cart_url }}" method="post" class="cart__form" novalidate>
        {%- if show_view_cart_button and settings.cart_checkout_button_type == 'checkout_view_cart' -%}
          <a href="{{ routes.cart_url }}" class="c-btn c-btn--hollow c-btn--full cart__view">
            {{- 'cart.general.view_cart' | t -}}
          </a>
        {%- endif -%}
        <noscript>
          <button type="submit" name="update" class="c-btn c-btn--hollow cart__button-update update-cart">
            {{ 'cart.general.update' | t }}
          </button>
        </noscript>
        <button type="submit" class="c-btn c-btn--full c-btn--primary cart__checkout" name="checkout">
          {%- liquid
            if settings.cart_checkout_button_icon_enable
              render 'icons', icon: 'icon-lock-2', icon_color: settings.color_button
            endif
          -%}
          <span>{{- 'cart.general.checkout' | t -}}</span>
          {%- if settings.cart_checkout_button_type == 'checkout_cart_amount' -%}
            <span>&ndash;</span><cart-total class="money">{{- total_cart_price -}}</cart-total>
          {%- endif -%}
        </button>

        {%- if show_additional_checkout_buttons and additional_checkout_buttons -%}
          <div class="additional-checkout-buttons">
            {{ content_for_additional_checkout_buttons }}
          </div>
        {%- endif %}

        {%- if settings.cart_terms -%}
          {% comment %} TODO: Color has to depend on context {% endcomment %}
          {%- liquid
            assign text_brightness = settings.color_text | color_brightness
            if text_brightness > 125
              assign check_color = 'dark'
            else
              assign check_color = 'light'
            endif
          -%}

          <cart-terms class="cart-terms">
            <div class="cart-terms__content">
              <cart-terms-error class="cart-terms__error" hidden>{{ 'cart.general.cart_error' | t }}</cart-terms-error>
              <input
                type="checkbox"
                class="cart-terms__input checkbox checkbox--{{ check_color }}"
                id="{{ form_id }}-agree"
                form="{{ form_id }}"
              >
              <label for="{{ form_id }}-agree" class="cart-terms__label rte">
                {{ settings.cart_terms_text }}
              </label>
            </div>
          </cart-terms>
        {%- endif -%}
      </form>
      {%- if settings.cart_payment_icons_enable and shop.enabled_payment_types -%}
        <ul class="cart__icons icons-list">
          {%- for type in shop.enabled_payment_types -%}
            <li class="icons-list__item">
              {{- type | payment_type_svg_tag: class: 'payment-icon' -}}
            </li>
          {%- endfor -%}
        </ul>
      {%- endif -%}
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Debugging: Check if cart__controls exists
    const cartControls = document.querySelector('.cart__controls');
    const freeShippingThreshold = parseInt(cartControls?.dataset.freeShippingThreshold) || 0;

    function updateCartMessage() {
      fetch('/cart.js')
        .then(response => response.json())
        .then(cart => {
          const cartTotal = cart.total_price;
          const reached = cartTotal >= 9000;
          const message = document.querySelector('.cart__message');
          if (message) {
            message.style.display = reached ? 'none' : 'block';
          } else {
            console.warn('cart__message element not found');
          }
        })
        .catch(error => console.error('Error fetching cart:', error));
    }

    // Initial call
    updateCartMessage();

    // Observe for cart changes
    const observer = new PerformanceObserver((list) => {
      list.getEntries().forEach((entry) => {
        if (['xmlhttprequest', 'fetch'].includes(entry.initiatorType) && /\/cart\//.test(entry.name)) {
          console.log('Cart update detected:', entry.name);
          setTimeout(updateCartMessage, 300); // Small delay to ensure cart is updated
        }
      });
    });
    observer.observe({ entryTypes: ['resource'] });
  });
</script>